#include "pch.h"
#include "CppUnitTest.h"
#include "../OpenBrackets/OpenBracketsHeader.h"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

namespace TestopenBrackets
{
	TEST_CLASS(TestopenBrackets)
	{

	public:

		// Тестируется функция isEqualTree, которая реализована для тестов основных функций. Деревья равны.

		TEST_METHOD(testing_isEqualTree_treesAreEqual)
		{
			// Входное дерево
			int inputRoot = 1;
			vector<Node> inputTree = { {-1, 2, 3, "-"}, {1, 4, 5, "+"}, {1, NotExist, NotExist, "c"}, {2, NotExist, NotExist, "a"}, {2, NotExist, NotExist, "b"} };

			// Ожидаемое дерево
			int expectedRoot = 1;
			vector<Node> expectedTree = { {-1, 2, 3, "-"}, {1, 4, 5, "+"}, {1, NotExist, NotExist, "c"}, {2, NotExist, NotExist, "a"}, {2, NotExist, NotExist, "b"} };

			bool isEqualTree = isEqualTrees(expectedTree, expectedRoot, inputTree, inputRoot);

			Assert::IsTrue(isEqualTree);
		}

		// Тестируется функция isEqualTree, которая реализована для тестов основных функций. Деревья не равны.

		TEST_METHOD(testing_isEqualTree_treesAreNotEqual)
		{
			// Входное дерево
			int inputRoot = 1;
			vector<Node> inputTree = { {-1, 2, 3, "-"}, {1, 4, 5, "+"}, {1, NotExist, NotExist, "c"}, {2, NotExist, NotExist, "a"}, {2, NotExist, NotExist, "b"} };

			// Ожидаемое дерево
			int expectedRoot = 1;
			vector<Node> expectedTree = { {-1, 2, 3, "-"}, {1, 4, 5, "+"}, {1, NotExist, NotExist, "c"}, {2, NotExist, NotExist, "a"}};

			bool isEqualTree = isEqualTrees(expectedTree, expectedRoot, inputTree, inputRoot);

			Assert::IsFalse(isEqualTree);
		}

		// Преобразование запрещено так как при перестановке изменяется выражение
		TEST_METHOD(transformationIsForbidden) 
		{
			// Входное дерево
			int inputRoot = 1;
			vector<Node> inputTree = { {-1, -1, -1, "\0"},
										{-1, 2, 3, "-"},
										{1, -1, -1, "a"},
										{1, -1, -1, "b"}};
			initializeFullTree(inputTree);

			// Ожидаемое дерево
			int expectedRoot = 1;
			vector<Node> expectedTree = {	{-1, -1, -1, "\0"},
											{-1, 2, 3, "-"},
											{1, -1, -1, "a"},
											{1, -1, -1, "b"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"} };

			openBrackets(inputTree, inputRoot);

			bool isEqualTree = isEqualTrees(expectedTree, expectedRoot, inputTree, inputRoot);

			Assert::IsTrue(isEqualTree);
		}

		// Скобки задают приоритет сложению над умножением
		TEST_METHOD(priorityToAdditionOverMultiplication) 
		{
			// Входное дерево
			int inputRoot = 1;
			vector<Node> inputTree = {	{-1, -1, -1, "\0"},
										{-1, 2, 5, "*"},
										{1, 3, 4, "+"},
										{2, -1, -1, "a"},
										{2, -1, -1, "b"},
										{1, -1, -1, "c"}};
			initializeFullTree(inputTree);

			// Ожидаемое дерево
			int expectedRoot = 1;
			vector<Node> expectedTree = {	{-1, -1, -1, "\0"},
											{-1, 31, 32, "+"},
											{1, 3, 4, "\0"},
											{31, -1, -1, "a"},
											{32, -1, -1, "b"},
											{31, -1, -1, "c"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{32, -1, -1, "c"},
											{1, 3, 5, "*"},
											{1, 4, 30, "*"} };

			openBrackets(inputTree, inputRoot);

			bool isEqualTree = isEqualTrees(expectedTree, expectedRoot, inputTree, inputRoot);

			Assert::IsTrue(isEqualTree);
		}

		// Скобки задают приоритет сложению над побитовым умножением
		TEST_METHOD(priorityToAdditionOverByteMultiplication) 
		{
			// Входное дерево
			int inputRoot = 1;
			vector<Node> inputTree = { {-1, -1, -1, "\0"},
										{-1, 2, 5, "&"},
										{1, 3, 4, "+"},
										{2, -1, -1, "a"},
										{2, -1, -1, "b"},
										{1, -1, -1, "c"} };
			initializeFullTree(inputTree);

			// Ожидаемое дерево
			int expectedRoot = 1;
			vector<Node> expectedTree = { {-1, -1, -1, "\0"},
											{-1, 31, 32, "+"},
											{1, 3, 4, "\0"},
											{31, -1, -1, "a"},
											{32, -1, -1, "b"},
											{31, -1, -1, "c"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{32, -1, -1, "c"},
											{1, 3, 5, "&"},
											{1, 4, 30, "&"} };

			openBrackets(inputTree, inputRoot);

			bool isEqualTree = isEqualTrees(expectedTree, expectedRoot, inputTree, inputRoot);

			Assert::IsTrue(isEqualTree);
		}

		// Скобки задают приоритет вычитанию над умножением
		TEST_METHOD(priorityToSubOverMultiplication) 
		{
			// Входное дерево
			int inputRoot = 1;
			vector<Node> inputTree = { {-1, -1, -1, "\0"},
										{-1, 2, 5, "*"},
										{1, 3, 4, "-"},
										{2, -1, -1, "a"},
										{2, -1, -1, "b"},
										{1, -1, -1, "c"} };
			initializeFullTree(inputTree);

			// Ожидаемое дерево
			int expectedRoot = 1;
			vector<Node> expectedTree = { {-1, -1, -1, "\0"},
											{-1, 31, 32, "-"},
											{1, 3, 4, "\0"},
											{31, -1, -1, "a"},
											{32, -1, -1, "b"},
											{31, -1, -1, "c"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{32, -1, -1, "c"},
											{1, 3, 5, "*"},
											{1, 4, 30, "*"} };

			openBrackets(inputTree, inputRoot);

			bool isEqualTree = isEqualTrees(expectedTree, expectedRoot, inputTree, inputRoot);

			Assert::IsTrue(isEqualTree);
		}

		// Скобки задают приоритет вычитанию над побитовым умножением
		TEST_METHOD(priorityToSubOverByteMultiplication) 
		{
			// Входное дерево
			int inputRoot = 1;
			vector<Node> inputTree = { {-1, -1, -1, "\0"},
										{-1, 2, 5, "&"},
										{1, 3, 4, "-"},
										{2, -1, -1, "a"},
										{2, -1, -1, "b"},
										{1, -1, -1, "c"} };
			initializeFullTree(inputTree);

			// Ожидаемое дерево
			int expectedRoot = 1;
			vector<Node> expectedTree = { {-1, -1, -1, "\0"},
											{-1, 31, 32, "-"},
											{1, 3, 4, "\0"},
											{31, -1, -1, "a"},
											{32, -1, -1, "b"},
											{31, -1, -1, "c"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{32, -1, -1, "c"},
											{1, 3, 5, "&"},
											{1, 4, 30, "&"} };

			openBrackets(inputTree, inputRoot);

			bool isEqualTree = isEqualTrees(expectedTree, expectedRoot, inputTree, inputRoot);

			Assert::IsTrue(isEqualTree);
		}

		// Скобки задают приоритет любым операциям над любыми операциями в других скобках
		TEST_METHOD(priorityToOperationsOverOtherBracketsOperations) 
		{
			// Входное дерево
			int inputRoot = 1;
			vector<Node> inputTree = {	{-1, -1, -1, "\0"},
										{-1, 2, 3, "*"},
										{1, 4, 5, "+"},
										{1, 6, 7, "+"},
										{2, -1, -1, "a"},
										{2, -1, -1, "b"},
										{3, -1, -1, "c"},
										{3, 8, 9, "+"},
										{7, -1, -1, "f"},
										{7, 10, 11, "*"},
										{9, -1, -1, "d"},
										{9, -1, -1, "e"} };
			initializeFullTree(inputTree);

			// Ожидаемое дерево
			int expectedRoot = 1;
			vector<Node> expectedTree = {	{-1, -1, -1, "\0"},
											{-1, 2, 3, "+"},
											{1, 38, 39, "+"},
											{1, 40, 41, "+"},
											{38, -1, -1, "a"},
											{40, -1, -1, "b"},
											{38, -1, -1, "c"},
											{39, 34, 35, "\0"},
											{46, -1, -1, "f"},
											{47, 36, 37, "*"},
											{9, -1, -1, "d"},
											{9, -1, -1, "e"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{43, -1, -1, "a"},
											{40, -1, -1, "c"},
											{46, -1, -1, "b"},
											{41, 8, 9, "\0"},
											{43, -1, -1, "f"},
											{44, 10, 11, "*"},
											{9, -1, -1, "d"},
											{9, -1, -1, "e"},
											{2, 4, 6, "*"},
											{2, 43, 44, "+"},
											{3, 5, 31, "*"},
											{3, 46, 47, "+"},
											{44, -1, -1, "a"},
											{39, 34, 30, "*"},
											{39, 35, 42, "*"},
											{47, -1, -1, "b"},
											{41, 8, 32, "*"},
											{41, 9, 45, "*"} };

			openBrackets(inputTree, inputRoot);

			bool isEqualTree = isEqualTrees(expectedTree, expectedRoot, inputTree, inputRoot);

			Assert::IsTrue(isEqualTree);
		}

		// Преобразование выражения с низкоприоритетными операциями не требуется, но перестановка операндов не приведет к ошибке
		TEST_METHOD(noTransformationNeededLowPriority) 
		{
			// Входное дерево
			int inputRoot = 1;
			vector<Node> inputTree = {	{-1, -1, -1, "\0"},
										{-1, 2, 3, "+"},
										{1, -1, -1, "a"},
										{1, -1, -1, "b"} };
			initializeFullTree(inputTree);

			// Ожидаемое дерево
			int expectedRoot = 1;
			vector<Node> expectedTree = {	{-1, -1, -1, "\0"},
											{-1, 2, 3, "+"},
											{1, -1, -1, "a"},
											{1, -1, -1, "b"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"} };

			openBrackets(inputTree, inputRoot);

			bool isEqualTree = isEqualTrees(expectedTree, expectedRoot, inputTree, inputRoot);

			Assert::IsTrue(isEqualTree);
		}

		// Преобразование выражения с высокооприоритетными операциями не требуется, но перестановка операндов не приведет к ошибке
		TEST_METHOD(noTransformationNeededHighPriority) 
		{
			// Входное дерево
			int inputRoot = 1;
			vector<Node> inputTree = { {-1, -1, -1, "\0"},
										{-1, 2, 3, "*"},
										{1, -1, -1, "a"},
										{1, -1, -1, "b"} };
			initializeFullTree(inputTree);

			// Ожидаемое дерево
			int expectedRoot = 1;
			vector<Node> expectedTree = {	{-1, -1, -1, "\0"},
											{-1, 2, 3, "*"},
											{1, -1, -1, "a"},
											{1, -1, -1, "b"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"} };

			openBrackets(inputTree, inputRoot);

			bool isEqualTree = isEqualTrees(expectedTree, expectedRoot, inputTree, inputRoot);

			Assert::IsTrue(isEqualTree);
		}

		// Умножение на -1 суммы
		TEST_METHOD(multiplicationOfSumAndNegativeUnit) 
		{
			// Входное дерево
			int inputRoot = 1;
			vector<Node> inputTree = {	{-1, -1, -1, "\0"},
										{-1, 2, 3, "*"},
										{1, -1, -1, "-1"},
										{1, 4, 5, "+"},
										{3, -1, -1, "a"},
										{3, -1, -1, "b"}};
			initializeFullTree(inputTree);

			// Ожидаемое дерево
			int expectedRoot = 1;
			vector<Node> expectedTree = {	{-1, -1, -1, "\0"},
											{-1, 31, 32, "+"},
											{31, -1, -1, "-1"},
											{1, 4, 5, "\0"},
											{31, -1, -1, "a"},
											{32, -1, -1, "b"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{32, -1, -1, "-1"},
											{1, 4, 2, "*"},
											{1, 5, 30, "*"} };

			openBrackets(inputTree, inputRoot);

			bool isEqualTree = isEqualTrees(expectedTree, expectedRoot, inputTree, inputRoot);

			Assert::IsTrue(isEqualTree);
		}

		// Умножение на -1 разности
		TEST_METHOD(multiplicationOfSubAndNegativeUnit) 
		{
			// Входное дерево
			int inputRoot = 1;
			vector<Node> inputTree = { {-1, -1, -1, "\0"},
										{-1, 2, 3, "*"},
										{1, -1, -1, "-1"},
										{1, 4, 5, "-"},
										{3, -1, -1, "a"},
										{3, -1, -1, "b"} };
			initializeFullTree(inputTree);

			// Ожидаемое дерево
			int expectedRoot = 1;
			vector<Node> expectedTree = { {-1, -1, -1, "\0"},
											{-1, 31, 32, "-"},
											{31, -1, -1, "-1"},
											{1, 4, 5, "\0"},
											{31, -1, -1, "a"},
											{32, -1, -1, "b"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{32, -1, -1, "-1"},
											{1, 4, 2, "*"},
											{1, 5, 30, "*"} };

			openBrackets(inputTree, inputRoot);

			bool isEqualTree = isEqualTrees(expectedTree, expectedRoot, inputTree, inputRoot);

			Assert::IsTrue(isEqualTree);
		}

		// Умножение на -1 составного выражения 
		TEST_METHOD(multiplicationOfCompositeExpressionAndNegativeUnit) 
		{
			// Входное дерево
			int inputRoot = 1;
			vector<Node> inputTree = {	{-1, -1, -1, "\0"},
										{-1, 2, 3, "*"},
										{1, -1, -1, "-1"},
										{1, 4, 7, "+"},
										{3, 5, 6, "&"},
										{4, -1, -1, "a"},
										{4, -1, -1, "b"},
										{3, 8, 9, "-"},
										{7, -1, -1, "d"},
										{7, -1, -1, "k"} };
			initializeFullTree(inputTree);

			// Ожидаемое дерево
			int expectedRoot = 1;
			vector<Node> expectedTree = {	{-1, -1, -1, "\0"},
											{-1, 31, 32, "+"},
											{31, -1, -1, "-1"},
											{1, 4, 7, "\0"},
											{31, 5, 6, "&"},
											{4, -1, -1, "a"},
											{4, -1, -1, "b"},
											{32, 8, 9, "\0"},
											{34, -1, -1, "d"},
											{35, -1, -1, "k"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{34, -1, -1, "-1"},
											{1, 4, 2, "*"},
											{1, 34, 35, "-"},
											{35, -1, -1, "-1"},
											{32, 8, 30, "*"},
											{32, 9, 33, "*"} };

			openBrackets(inputTree, inputRoot);

			bool isEqualTree = isEqualTrees(expectedTree, expectedRoot, inputTree, inputRoot);

			Assert::IsTrue(isEqualTree);
		}

		// Распределительный закон для нескольких скобок
		TEST_METHOD(multiplicationOfSomeBrackets) 
		{
			// Входное дерево
			int inputRoot = 1;
			vector<Node> inputTree = {	{-1, -1, -1, "\0"},
										{-1, 2, 3, "*"},
										{1, 4, 5, "+"},
										{1, 6, 7, "+"},
										{2, -1, -1, "a"},
										{2, -1, -1, "b"},
										{3, -1, -1, "c"},
										{3, -1, -1, "d"}};
			initializeFullTree(inputTree);

			// Ожидаемое дерево
			int expectedRoot = 1;
			vector<Node> expectedTree = {	{-1, -1, -1, "\0"},
											{-1, 2, 3, "+"},
											{1, 34, 35, "+"},
											{1, 36, 37, "+"},
											{34, -1, -1, "a"},
											{36, -1, -1, "b"},
											{34, -1, -1, "c"},
											{35, -1, -1, "d"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{35, -1, -1, "a"},
											{36, -1, -1, "c"},
											{37, -1, -1, "b"},
											{37, -1, -1, "d"},
											{2, 4, 6, "*"},
											{2, 30, 7, "*"},
											{3, 5, 31, "*"},
											{3, 32, 33, "*"} };

			openBrackets(inputTree, inputRoot);

			bool isEqualTree = isEqualTrees(expectedTree, expectedRoot, inputTree, inputRoot);

			Assert::IsTrue(isEqualTree);
		}

		// Умножение с операндами-числами
		TEST_METHOD(multiplicationOfNumbersOperands) 
		{
			// Входное дерево
			int inputRoot = 1;
			vector<Node> inputTree = {	{-1, -1, -1, "\0"},
										{-1, 2, 5, "*"},
										{1, 3, 4, "+"},
										{2, -1, -1, "1"},
										{2, -1, -1, "2"},
										{1, -1, -1, "3"}};
			initializeFullTree(inputTree);

			// Ожидаемое дерево
			int expectedRoot = 1;
			vector<Node> expectedTree = {	{-1, -1, -1, "\0"},
											{-1, 31, 32, "+"},
											{1, 3, 4, "\0"},
											{31, -1, -1, "1"},
											{32, -1, -1, "2"},
											{31, -1, -1, "3"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{32, -1, -1, "3"},
											{1, 3, 5, "*"},
											{1, 4, 30, "*"} };

			openBrackets(inputTree, inputRoot);

			bool isEqualTree = isEqualTrees(expectedTree, expectedRoot, inputTree, inputRoot);

			Assert::IsTrue(isEqualTree);
		}

		// Умножение со смешанным типом операндов
		TEST_METHOD(multiplicationOfMixOperands) 
		{
			// Входное дерево
			int inputRoot = 1;
			vector<Node> inputTree = {	{-1, -1, -1, "\0"},
										{-1, 2, 5, "*"},
										{1, 3, 4, "+"},
										{2, -1, -1, "1"},
										{2, -1, -1, "a"},
										{1, -1, -1, "2ef"} };
			initializeFullTree(inputTree);

			// Ожидаемое дерево
			int expectedRoot = 1;
			vector<Node> expectedTree = {	{-1, -1, -1, "\0"},
											{-1, 31, 32, "+"},
											{1, 3, 4, "\0"},
											{31, -1, -1, "1"},
											{32, -1, -1, "a"},
											{31, -1, -1, "2ef"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{32, -1, -1, "2ef"},
											{1, 3, 5, "*"},
											{1, 4, 30, "*"} };

			openBrackets(inputTree, inputRoot);

			bool isEqualTree = isEqualTrees(expectedTree, expectedRoot, inputTree, inputRoot);

			Assert::IsTrue(isEqualTree);
		}

		// При раскрытии выражения рекурсивный обход дерева должны происходить не один раз  (a+b)*(1-(-2 - (c+d))) = a*1-a*(-2)+c*a+d*a+b*1-b*(-2)+c*b+d*b
		TEST_METHOD(whileTransformationRecursionNotOnlyOnce) 
		{
			// Входное дерево
			int inputRoot = 1;
			vector<Node> inputTree = { {-1, -1, -1, "\0"},
										{-1, 2, 3, "*"},
										{1, 4, 5, "+"},
										{1, 6, 7, "-"},
										{2, -1, -1, "a"},
										{2, -1, -1, "b"},
										{3, -1, -1, "1"},
										{3, 8, 9, "-"},
										{7, -1, -1, "-2"},
										{7, 10, 11, "+"},
										{9, -1, -1, "c"},
										{9, -1, -1, "d"} };
			initializeFullTree(inputTree);

			// Ожидаемое дерево
			int expectedRoot = 1;
			vector<Node> expectedTree = { {-1, -1, -1, "\0"},
											{-1, 2, 3, "+"},
											{1, 38, 39, "-"},
											{1, 40, 41, "-"},
											{46, -1, -1, "a"},
											{52, -1, -1, "b"},
											{46, -1, -1, "1"},
											{49, 33, 34, "\0"},
											{39, -1, -1, "-2"},
											{38, 32, 35, "\0"},
											{47, -1, -1, "c"},
											{50, -1, -1, "d"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{39, -1, -1, "a"},
											{40, 7, 11, "\0"},
											{43, 6, 10, "\0"},
											{52, -1, -1, "1"},
											{53, -1, -1, "c"},
											{44, -1, -1, "d"},
											{41, -1, -1, "b"},
											{41, -1, -1, "-2"},
											{2, 43, 44, "+"},
											{2, 30, 8, "*"},
											{3, 49, 50, "+"},
											{3, 36, 37, "*"},
											{44, -1, -1, "a"},
											{38, 46, 47, "+"},
											{38, 35, 42, "*"},
											{47, -1, -1, "a"},
											{43, 6, 4, "*"},
											{43, 10, 45, "*"},
											{50, -1, -1, "b"},
											{40, 52, 53, "+"},
											{40, 11, 48, "*"},
											{53, -1, -1, "b"},
											{49, 33, 5, "*"},
											{49, 34, 51, "*"} };

			openBrackets(inputTree, inputRoot);

			bool isEqualTree = isEqualTrees(expectedTree, expectedRoot, inputTree, inputRoot);

			Assert::IsTrue(isEqualTree);
		}

		// У рекурсии не одно направление a-1*(0+1*(-1*((-a)-b)))
		TEST_METHOD(notOnlyOneRecursionDirection) 
		{
			// Входное дерево
			int inputRoot = 1;
			vector<Node> inputTree = {	{-1, -1, -1, "\0"},
										{-1, 2, 3, "-"},
										{1, -1, -1, "a"},
										{1, 4, 5, "*"},
										{3, -1, -1, "1"},
										{3, 6, 7, "+"},
										{5, -1, -1, "0"},
										{5, 8, 9, "*"},
										{7, -1, -1, "1"},
										{7, 10, 11, "*"},
										{9, -1, -1, "-1"},
										{9, 12, 13, "-"},
										{11, -1, -1, "-a"},
										{11, -1, -1, "b"}};
			initializeFullTree(inputTree);

			// Ожидаемое дерево
			int expectedRoot = 1;
			vector<Node> expectedTree = {	{-1, -1, -1, "\0"},
											{-1, 3, 37, "-"},
											{38, -1, -1, "a"},
											{1, 38, 40, "-"},
											{37, -1, -1, "1"},
											{3, 6, 7, "\0"},
											{37, -1, -1, "0"},
											{38, 34, 35, "\0"},
											{34, -1, -1, "1"},
											{7, 31, 32, "\0"},
											{31, -1, -1, "-1"},
											{9, 12, 13, "\0"},
											{31, -1, -1, "-a"},
											{32, -1, -1, "b"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{32, -1, -1, "-1"},
											{34, 12, 10, "*"},
											{35, 13, 30, "*"},
											{35, -1, -1, "1"},
											{40, 31, 8, "*"},
											{41, 32, 33, "*"},
											{40, -1, -1, "1"},
											{1, 6, 4, "*"},
											{3, 2, 41, "+"},
											{41, -1, -1, "1"},
											{3, 34, 36, "*"},
											{38, 35, 39, "*"} };

			openBrackets(inputTree, inputRoot);

			bool isEqualTree = isEqualTrees(expectedTree, expectedRoot, inputTree, inputRoot);

			Assert::IsTrue(isEqualTree);
		}

		// Комплексный тест из внешней спецификации, у вершин исходного дерева индексы не по порядку
		TEST_METHOD(сomplexTest) 
		{
			// Входное дерево
			int inputRoot = 1;
			vector<Node> inputTree = {	{-1, -1, -1, "\0"},
										{-1, 2, 3, "+"},
										{1, 7, 6, "-"},
										{1, 5, 4, "*"},
										{3, 11, 29, "+"},
										{3, 9, 10, "+"},
										{2, -1, -1, "b"},
										{2, -1, -1, "8"},
										{-1, -1, -1, "\0"},
										{5, -1, -1, "2"},
										{5, -1, -1, "3"},
										{4, -1, -1, "val"},
										{-1, -1, -1, "\0"},
										{-1, -1, -1, "\0"},
										{-1, -1, -1, "\0"},
										{-1, -1, -1, "\0"},
										{-1, -1, -1, "\0"},
										{-1, -1, -1, "\0"},
										{-1, -1, -1, "\0"},
										{-1, -1, -1, "\0"},
										{-1, -1, -1, "\0"},
										{-1, -1, -1, "\0"},
										{-1, -1, -1, "\0"},
										{-1, -1, -1, "\0"},
										{-1, -1, -1, "\0"},
										{-1, -1, -1, "\0"},
										{-1, -1, -1, "\0"},
										{-1, -1, -1, "\0"},
										{-1, -1, -1, "\0"},
										{4, -1, -1, "var123"} };
			initializeFullTree(inputTree);

			// Ожидаемое дерево
			int expectedRoot = 1;
			vector<Node> expectedTree = {	{-1, -1, -1, "\0"},
											{-1, 2, 3, "+"},
											{1, 7, 6, "-"},
											{1, 5, 4, "+"},
											{3, 36, 37, "+"},
											{3, 34, 35, "+"},
											{2, -1, -1, "b"},
											{2, -1, -1, "8"},
											{-1, -1, -1, "\0"},
											{34, -1, -1, "2"},
											{36, -1, -1, "3"},
											{34, -1, -1, "val"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{-1, -1, -1, "\0"},
											{35, -1, -1, "var123"},
											{35, -1, -1, "2"},
											{36, -1, -1, "val"},
											{37, -1, -1, "3"},
											{37, -1, -1, "var123"},
											{5, 9, 11, "*"},
											{5, 30, 29, "*"},
											{4, 10, 31, "*"},
											{4, 32, 33, "*"} };

			openBrackets(inputTree, inputRoot);

			bool isEqualTree = isEqualTrees(expectedTree, expectedRoot, inputTree, inputRoot);

			Assert::IsTrue(isEqualTree);
		}

		// Комплексный тест: максимальное дерево, тест под нагрузкой
		/*
		29
		1 -1 *
		2 1 *
		3 1 *
		4 2 +
		5 2 +
		6 3 +
		7 3 +
		8 4 +
		9 4 +
		10 5 +
		11 5 +
		12 6 +
		13 6 +
		14 7 +
		15 7 u
		16 8 a
		17 8 b
		18 9 c
		19 9 d
		20 10 e
		21 10 f
		22 11 g
		23 11 h
		24 12 i
		25 12 j
		26 13 k
		27 13 l
		28 14 p
		29 14 m
		*/

		//TEST_METHOD(сomplexTest_loadTesting)
		//{
		//	// Входное дерево
		//	int inputRoot = 1;
		//	vector<Node> inputTree = {	{-1, -1, -1, "\0"},
		//								{-1, 2, 3, "*"},
		//								{1, 4, 5, "*"},
		//								{1, 6, 7, "*"},
		//								{2, 8, 9, "+"},
		//								{2, 10, 11, "+"},
		//								{3, 12, 13, "+"},
		//								{3, 14, 15, "+"},
		//								{4, 16, 17, "+"},
		//								{4, 18, 19, "+"},
		//								{5, 20, 21, "+"},
		//								{5, 22, 23, "+"},
		//								{6, 24, 25, "+"},
		//								{6, 26, 27, "+"},
		//								{7, 28, 29, "+"},
		//								{7, -1, -1, "u"},
		//								{8, -1, -1, "a"},
		//								{8, -1, -1, "b"},
		//								{9, -1, -1, "c"},
		//								{9, -1, -1, "d"},
		//								{10, -1, -1, "e"},
		//								{10, -1, -1, "f"},
		//								{11, -1, -1, "g"},
		//								{11, -1, -1, "h"},
		//								{12, -1, -1, "i"},
		//								{12, -1, -1, "j"},
		//								{13, -1, -1, "k"},
		//								{13, -1, -1, "l"},
		//								{14, -1, -1, "p"},
		//								{14, -1, -1, "m"} };
		//	initializeFullTree(inputTree);

		//	// Ожидаемое дерево
		//	int expectedRoot = 1;
		//	vector<Node> expectedTree = {	{-1, -1, -1, "\0"},
		//									{-1, 2, 3, "+"},
		//									{1, 222, 223, "+"},
		//									{1, 224, 225, "+"},
		//									{222, 278, 279, "+"},
		//									{224, 950, 951, "+"},
		//									{222, 280, 281, "+"},
		//									{223, 616, 617, "+"},
		//									{398, 379, 382, "\0"},
		//									{1070, 1051, 1054, "\0"},
		//									{400, 389, 392, "\0"},
		//									{540, 529, 532, "\0"},
		//									{450, 468, 469, "+"},
		//									{786, 804, 805, "+"},
		//									{451, 484, 485, "+"},
		//									{101, -1, -1, "u"},
		//									{58, -1, -1, "a"},
		//									{60, -1, -1, "b"},
		//									{74, -1, -1, "c"},
		//									{76, -1, -1, "d"},
		//									{66, -1, -1, "e"},
		//									{67, -1, -1, "f"},
		//									{74, -1, -1, "g"},
		//									{75, -1, -1, "h"},
		//									{101, -1, -1, "i"},
		//									{102, -1, -1, "j"},
		//									{112, -1, -1, "k"},
		//									{113, -1, -1, "l"},
		//									{107, -1, -1, "p"},
		//									{108, -1, -1, "m"},
		//									{538, 519, 522, "\0"},
		//									{50, -1, -1, "a"},
		//									{52, -1, -1, "b"},
		//									{1072, 1061, 1064, "\0"},
		//									{50, -1, -1, "e"},
		//									{51, -1, -1, "f"},
		//									{1210, 1191, 1194, "\0"},
		//									{66, -1, -1, "c"},
		//									{68, -1, -1, "d"},
		//									{1212, 1201, 1204, "\0"},
		//									{58, -1, -1, "g"},
		//									{59, -1, -1, "h"},
		//									{614, 646, 647, "+"},
		//									{616, 786, 787, "+"},
		//									{1286, 1318, 1319, "+"},
		//									{1288, 1458, 1459, "+"},
		//									{51, -1, -1, "a"},
		//									{52, -1, -1, "e"},
		//									{53, -1, -1, "b"},
		//									{53, -1, -1, "f"},
		//									{678, 667, 668, "*"},
		//									{680, 673, 674, "*"},
		//									{710, 699, 700, "*"},
		//									{712, 705, 706, "*"},
		//									{59, -1, -1, "a"},
		//									{60, -1, -1, "g"},
		//									{61, -1, -1, "b"},
		//									{61, -1, -1, "h"},
		//									{818, 807, 808, "*"},
		//									{820, 813, 814, "*"},
		//									{850, 839, 840, "*"},
		//									{852, 845, 846, "*"},
		//									{67, -1, -1, "c"},
		//									{68, -1, -1, "e"},
		//									{69, -1, -1, "d"},
		//									{69, -1, -1, "f"},
		//									{1350, 1339, 1340, "*"},
		//									{1352, 1345, 1346, "*"},
		//									{1382, 1371, 1372, "*"},
		//									{1384, 1377, 1378, "*"},
		//									{75, -1, -1, "c"},
		//									{76, -1, -1, "g"},
		//									{77, -1, -1, "d"},
		//									{77, -1, -1, "h"},
		//									{1490, 1479, 1480, "*"},
		//									{1492, 1485, 1486, "*"},
		//									{1522, 1511, 1512, "*"},
		//									{1524, 1517, 1518, "*"},
		//									{89, 24, 25, "\0"},
		//									{96, -1, -1, "i"},
		//									{98, -1, -1, "j"},
		//									{787, 820, 821, "+"},
		//									{96, -1, -1, "p"},
		//									{97, -1, -1, "m"},
		//									{91, 26, 27, "\0"},
		//									{107, -1, -1, "k"},
		//									{109, -1, -1, "l"},
		//									{112, -1, -1, "u"},
		//									{950, 984, 985, "+"},
		//									{951, 1072, 1073, "+"},
		//									{1286, 1320, 1321, "+"},
		//									{1287, 1408, 1409, "+"},
		//									{97, -1, -1, "i"},
		//									{98, -1, -1, "p"},
		//									{99, -1, -1, "j"},
		//									{99, -1, -1, "m"},
		//									{1030, 1022, 1023, "*"},
		//									{1031, 1028, 1029, "*"},
		//									{1046, 1038, 1039, "*"},
		//									{1047, 1044, 1045, "*"},
		//									{102, -1, -1, "u"},
		//									{545, 543, 544, "*"},
		//									{550, 548, 549, "*"},
		//									{108, -1, -1, "k"},
		//									{109, -1, -1, "p"},
		//									{110, -1, -1, "l"},
		//									{110, -1, -1, "m"},
		//									{1366, 1358, 1359, "*"},
		//									{1367, 1364, 1365, "*"},
		//									{1382, 1374, 1375, "*"},
		//									{1383, 1380, 1381, "*"},
		//									{113, -1, -1, "u"},
		//									{881, 879, 880, "*"},
		//									{886, 884, 885, "*"},
		//									{223, 614, 615, "+"},
		//									{278, 310, 311, "+"},
		//									{734, 715, 718, "\0"},
		//									{342, 331, 332, "*"},
		//									{50, -1, -1, "a"},
		//									{50, -1, -1, "e"},
		//									{344, 337, 338, "*"},
		//									{51, -1, -1, "a"},
		//									{51, -1, -1, "f"},
		//									{736, 725, 728, "\0"},
		//									{374, 363, 364, "*"},
		//									{52, -1, -1, "b"},
		//									{52, -1, -1, "e"},
		//									{376, 369, 370, "*"},
		//									{53, -1, -1, "b"},
		//									{53, -1, -1, "f"},
		//									{280, 450, 451, "+"},
		//									{874, 855, 858, "\0"},
		//									{482, 471, 472, "*"},
		//									{58, -1, -1, "a"},
		//									{58, -1, -1, "g"},
		//									{484, 477, 478, "*"},
		//									{59, -1, -1, "a"},
		//									{59, -1, -1, "h"},
		//									{876, 865, 868, "\0"},
		//									{514, 503, 504, "*"},
		//									{60, -1, -1, "b"},
		//									{60, -1, -1, "g"},
		//									{516, 509, 510, "*"},
		//									{61, -1, -1, "b"},
		//									{61, -1, -1, "h"},
		//									{224, 952, 953, "+"},
		//									{278, 312, 313, "+"},
		//									{1122, 1140, 1141, "+"},
		//									{358, 350, 351, "*"},
		//									{96, -1, -1, "i"},
		//									{96, -1, -1, "p"},
		//									{359, 356, 357, "*"},
		//									{97, -1, -1, "i"},
		//									{97, -1, -1, "m"},
		//									{1123, 1156, 1157, "+"},
		//									{374, 366, 367, "*"},
		//									{98, -1, -1, "j"},
		//									{98, -1, -1, "p"},
		//									{375, 372, 373, "*"},
		//									{99, -1, -1, "j"},
		//									{99, -1, -1, "m"},
		//									{279, 400, 401, "+"},
		//									{1217, 1215, 1216, "*"},
		//									{101, -1, -1, "i"},
		//									{101, -1, -1, "u"},
		//									{1222, 1220, 1221, "*"},
		//									{102, -1, -1, "j"},
		//									{102, -1, -1, "u"},
		//									{225, 1286, 1287, "+"},
		//									{950, 982, 983, "+"},
		//									{1406, 1387, 1390, "\0"},
		//									{1014, 1003, 1004, "*"},
		//									{66, -1, -1, "c"},
		//									{66, -1, -1, "e"},
		//									{1016, 1009, 1010, "*"},
		//									{67, -1, -1, "c"},
		//									{67, -1, -1, "f"},
		//									{1408, 1397, 1400, "\0"},
		//									{1046, 1035, 1036, "*"},
		//									{68, -1, -1, "d"},
		//									{68, -1, -1, "e"},
		//									{1048, 1041, 1042, "*"},
		//									{69, -1, -1, "d"},
		//									{69, -1, -1, "f"},
		//									{952, 1122, 1123, "+"},
		//									{1546, 1527, 1530, "\0"},
		//									{1154, 1143, 1144, "*"},
		//									{74, -1, -1, "c"},
		//									{74, -1, -1, "g"},
		//									{1156, 1149, 1150, "*"},
		//									{75, -1, -1, "c"},
		//									{75, -1, -1, "h"},
		//									{1548, 1537, 1540, "\0"},
		//									{1186, 1175, 1176, "*"},
		//									{76, -1, -1, "d"},
		//									{76, -1, -1, "g"},
		//									{1188, 1181, 1182, "*"},
		//									{77, -1, -1, "d"},
		//									{77, -1, -1, "h"},
		//									{225, 1288, 1289, "+"},
		//									{614, 648, 649, "+"},
		//									{1458, 1476, 1477, "+"},
		//									{694, 686, 687, "*"},
		//									{107, -1, -1, "k"},
		//									{107, -1, -1, "p"},
		//									{695, 692, 693, "*"},
		//									{108, -1, -1, "k"},
		//									{108, -1, -1, "m"},
		//									{1459, 1492, 1493, "+"},
		//									{710, 702, 703, "*"},
		//									{109, -1, -1, "l"},
		//									{109, -1, -1, "p"},
		//									{711, 708, 709, "*"},
		//									{110, -1, -1, "l"},
		//									{110, -1, -1, "m"},
		//									{615, 736, 737, "+"},
		//									{1553, 1551, 1552, "*"},
		//									{112, -1, -1, "k"},
		//									{112, -1, -1, "u"},
		//									{1558, 1556, 1557, "*"},
		//									{113, -1, -1, "l"},
		//									{113, -1, -1, "u"},
		//									{2, 4, 6, "+"},
		//									{2, 114, 7, "+"},
		//									{3, 5, 145, "+"},
		//									{3, 168, 199, "+"},
		//									{279, 398, 399, "+"},
		//									{310, 326, 327, "+"},
		//									{410, 380, 381, "*"},
		//									{50, -1, -1, "a"},
		//									{50, -1, -1, "e"},
		//									{411, 383, 384, "*"},
		//									{51, -1, -1, "a"},
		//									{51, -1, -1, "f"},
		//									{312, 358, 359, "+"},
		//									{420, 390, 391, "*"},
		//									{52, -1, -1, "b"},
		//									{52, -1, -1, "e"},
		//									{421, 393, 394, "*"},
		//									{53, -1, -1, "b"},
		//									{53, -1, -1, "f"},
		//									{280, 452, 453, "+"},
		//									{310, 328, 329, "+"},
		//									{498, 490, 491, "*"},
		//									{96, -1, -1, "i"},
		//									{96, -1, -1, "p"},
		//									{499, 496, 497, "*"},
		//									{97, -1, -1, "i"},
		//									{97, -1, -1, "m"},
		//									{311, 344, 345, "+"},
		//									{514, 506, 507, "*"},
		//									{98, -1, -1, "j"},
		//									{98, -1, -1, "p"},
		//									{515, 512, 513, "*"},
		//									{99, -1, -1, "j"},
		//									{99, -1, -1, "m"},
		//									{281, 538, 539, "+"},
		//									{450, 466, 467, "+"},
		//									{550, 520, 521, "*"},
		//									{58, -1, -1, "a"},
		//									{58, -1, -1, "g"},
		//									{551, 523, 524, "*"},
		//									{59, -1, -1, "a"},
		//									{59, -1, -1, "h"},
		//									{452, 498, 499, "+"},
		//									{560, 530, 531, "*"},
		//									{60, -1, -1, "b"},
		//									{60, -1, -1, "g"},
		//									{561, 533, 534, "*"},
		//									{61, -1, -1, "b"},
		//									{61, -1, -1, "h"},
		//									{281, 540, 541, "+"},
		//									{405, 403, 404, "*"},
		//									{101, -1, -1, "i"},
		//									{101, -1, -1, "u"},
		//									{410, 408, 409, "*"},
		//									{102, -1, -1, "j"},
		//									{102, -1, -1, "u"},
		//									{4, 115, 146, "+"},
		//									{4, 226, 161, "+"},
		//									{6, 130, 241, "+"},
		//									{6, 256, 271, "+"},
		//									{311, 342, 343, "+"},
		//									{326, 315, 316, "*"},
		//									{50, -1, -1, "a"},
		//									{50, -1, -1, "e"},
		//									{328, 321, 322, "*"},
		//									{51, -1, -1, "a"},
		//									{51, -1, -1, "f"},
		//									{312, 360, 361, "+"},
		//									{326, 318, 319, "*"},
		//									{96, -1, -1, "i"},
		//									{96, -1, -1, "p"},
		//									{327, 324, 325, "*"},
		//									{97, -1, -1, "i"},
		//									{97, -1, -1, "m"},
		//									{313, 374, 375, "+"},
		//									{358, 347, 348, "*"},
		//									{52, -1, -1, "b"},
		//									{52, -1, -1, "e"},
		//									{360, 353, 354, "*"},
		//									{53, -1, -1, "b"},
		//									{53, -1, -1, "f"},
		//									{313, 376, 377, "+"},
		//									{342, 334, 335, "*"},
		//									{98, -1, -1, "j"},
		//									{98, -1, -1, "p"},
		//									{343, 340, 341, "*"},
		//									{99, -1, -1, "j"},
		//									{99, -1, -1, "m"},
		//									{115, 227, 242, "+"},
		//									{115, 282, 249, "+"},
		//									{146, 234, 289, "+"},
		//									{146, 296, 303, "+"},
		//									{327, 229, 230, "*"},
		//									{50, -1, -1, "a"},
		//									{50, -1, -1, "e"},
		//									{328, 244, 245, "*"},
		//									{96, -1, -1, "i"},
		//									{96, -1, -1, "p"},
		//									{329, 232, 233, "*"},
		//									{51, -1, -1, "a"},
		//									{51, -1, -1, "f"},
		//									{329, 247, 248, "*"},
		//									{97, -1, -1, "i"},
		//									{97, -1, -1, "m"},
		//									{227, 283, 290, "*"},
		//									{227, 314, 293, "*"},
		//									{242, 286, 317, "*"},
		//									{242, 320, 323, "*"},
		//									{343, 284, 285, "*"},
		//									{50, -1, -1, "a"},
		//									{50, -1, -1, "e"},
		//									{344, 251, 252, "*"},
		//									{98, -1, -1, "j"},
		//									{98, -1, -1, "p"},
		//									{345, 287, 288, "*"},
		//									{51, -1, -1, "a"},
		//									{51, -1, -1, "f"},
		//									{345, 254, 255, "*"},
		//									{99, -1, -1, "j"},
		//									{99, -1, -1, "m"},
		//									{282, 117, 304, "*"},
		//									{282, 330, 307, "*"},
		//									{249, 120, 333, "*"},
		//									{249, 336, 339, "*"},
		//									{359, 236, 237, "*"},
		//									{52, -1, -1, "b"},
		//									{52, -1, -1, "e"},
		//									{360, 291, 292, "*"},
		//									{96, -1, -1, "i"},
		//									{96, -1, -1, "p"},
		//									{361, 239, 240, "*"},
		//									{53, -1, -1, "b"},
		//									{53, -1, -1, "f"},
		//									{361, 294, 295, "*"},
		//									{97, -1, -1, "i"},
		//									{97, -1, -1, "m"},
		//									{234, 297, 148, "*"},
		//									{234, 346, 151, "*"},
		//									{289, 300, 349, "*"},
		//									{289, 352, 355, "*"},
		//									{375, 298, 299, "*"},
		//									{52, -1, -1, "b"},
		//									{52, -1, -1, "e"},
		//									{376, 305, 306, "*"},
		//									{98, -1, -1, "j"},
		//									{98, -1, -1, "p"},
		//									{377, 301, 302, "*"},
		//									{53, -1, -1, "b"},
		//									{53, -1, -1, "f"},
		//									{377, 308, 309, "*"},
		//									{99, -1, -1, "j"},
		//									{99, -1, -1, "m"},
		//									{296, 124, 155, "*"},
		//									{296, 362, 158, "*"},
		//									{303, 127, 365, "*"},
		//									{303, 368, 371, "*"},
		//									{399, 228, 231, "\0"},
		//									{405, 31, 34, "*"},
		//									{50, -1, -1, "a"},
		//									{50, -1, -1, "e"},
		//									{406, 46, 35, "*"},
		//									{51, -1, -1, "a"},
		//									{51, -1, -1, "f"},
		//									{415, 413, 414, "*"},
		//									{101, -1, -1, "i"},
		//									{101, -1, -1, "u"},
		//									{401, 235, 238, "\0"},
		//									{415, 32, 47, "*"},
		//									{52, -1, -1, "b"},
		//									{52, -1, -1, "e"},
		//									{416, 48, 49, "*"},
		//									{53, -1, -1, "b"},
		//									{53, -1, -1, "f"},
		//									{420, 418, 419, "*"},
		//									{102, -1, -1, "j"},
		//									{102, -1, -1, "u"},
		//									{226, 405, 406, "+"},
		//									{226, 410, 411, "+"},
		//									{161, 415, 416, "+"},
		//									{161, 420, 421, "+"},
		//									{406, 386, 387, "*"},
		//									{101, -1, -1, "i"},
		//									{101, -1, -1, "u"},
		//									{398, 379, 272, "*"},
		//									{398, 382, 402, "*"},
		//									{411, 396, 397, "*"},
		//									{102, -1, -1, "j"},
		//									{102, -1, -1, "u"},
		//									{399, 228, 275, "*"},
		//									{399, 231, 407, "*"},
		//									{416, 163, 164, "*"},
		//									{101, -1, -1, "i"},
		//									{101, -1, -1, "u"},
		//									{400, 389, 385, "*"},
		//									{400, 392, 412, "*"},
		//									{421, 166, 167, "*"},
		//									{102, -1, -1, "j"},
		//									{102, -1, -1, "u"},
		//									{401, 235, 395, "*"},
		//									{401, 238, 417, "*"},
		//									{451, 482, 483, "+"},
		//									{466, 455, 456, "*"},
		//									{58, -1, -1, "a"},
		//									{58, -1, -1, "g"},
		//									{468, 461, 462, "*"},
		//									{59, -1, -1, "a"},
		//									{59, -1, -1, "h"},
		//									{452, 500, 501, "+"},
		//									{466, 458, 459, "*"},
		//									{96, -1, -1, "i"},
		//									{96, -1, -1, "p"},
		//									{467, 464, 465, "*"},
		//									{97, -1, -1, "i"},
		//									{97, -1, -1, "m"},
		//									{453, 514, 515, "+"},
		//									{498, 487, 488, "*"},
		//									{60, -1, -1, "b"},
		//									{60, -1, -1, "g"},
		//									{500, 493, 494, "*"},
		//									{61, -1, -1, "b"},
		//									{61, -1, -1, "h"},
		//									{453, 516, 517, "+"},
		//									{482, 474, 475, "*"},
		//									{98, -1, -1, "j"},
		//									{98, -1, -1, "p"},
		//									{483, 480, 481, "*"},
		//									{99, -1, -1, "j"},
		//									{99, -1, -1, "m"},
		//									{130, 257, 12, "+"},
		//									{130, 422, 14, "+"},
		//									{241, 264, 429, "+"},
		//									{241, 436, 443, "+"},
		//									{467, 259, 260, "*"},
		//									{58, -1, -1, "a"},
		//									{58, -1, -1, "g"},
		//									{468, 79, 82, "*"},
		//									{96, -1, -1, "i"},
		//									{96, -1, -1, "p"},
		//									{469, 262, 263, "*"},
		//									{59, -1, -1, "a"},
		//									{59, -1, -1, "h"},
		//									{469, 92, 83, "*"},
		//									{97, -1, -1, "i"},
		//									{97, -1, -1, "m"},
		//									{257, 423, 430, "*"},
		//									{257, 454, 433, "*"},
		//									{12, 426, 457, "*"},
		//									{12, 460, 463, "*"},
		//									{483, 424, 425, "*"},
		//									{58, -1, -1, "a"},
		//									{58, -1, -1, "g"},
		//									{484, 80, 93, "*"},
		//									{98, -1, -1, "j"},
		//									{98, -1, -1, "p"},
		//									{485, 427, 428, "*"},
		//									{59, -1, -1, "a"},
		//									{59, -1, -1, "h"},
		//									{485, 94, 95, "*"},
		//									{99, -1, -1, "j"},
		//									{99, -1, -1, "m"},
		//									{422, 132, 444, "*"},
		//									{422, 470, 447, "*"},
		//									{14, 135, 473, "*"},
		//									{14, 476, 479, "*"},
		//									{499, 266, 267, "*"},
		//									{60, -1, -1, "b"},
		//									{60, -1, -1, "g"},
		//									{500, 431, 432, "*"},
		//									{96, -1, -1, "i"},
		//									{96, -1, -1, "p"},
		//									{501, 269, 270, "*"},
		//									{61, -1, -1, "b"},
		//									{61, -1, -1, "h"},
		//									{501, 434, 435, "*"},
		//									{97, -1, -1, "i"},
		//									{97, -1, -1, "m"},
		//									{264, 437, 243, "*"},
		//									{264, 486, 246, "*"},
		//									{429, 440, 489, "*"},
		//									{429, 492, 495, "*"},
		//									{515, 438, 439, "*"},
		//									{60, -1, -1, "b"},
		//									{60, -1, -1, "g"},
		//									{516, 445, 446, "*"},
		//									{98, -1, -1, "j"},
		//									{98, -1, -1, "p"},
		//									{517, 441, 442, "*"},
		//									{61, -1, -1, "b"},
		//									{61, -1, -1, "h"},
		//									{517, 448, 449, "*"},
		//									{99, -1, -1, "j"},
		//									{99, -1, -1, "m"},
		//									{436, 139, 250, "*"},
		//									{436, 502, 253, "*"},
		//									{443, 142, 505, "*"},
		//									{443, 508, 511, "*"},
		//									{539, 258, 261, "\0"},
		//									{545, 16, 40, "*"},
		//									{58, -1, -1, "a"},
		//									{58, -1, -1, "g"},
		//									{546, 54, 41, "*"},
		//									{59, -1, -1, "a"},
		//									{59, -1, -1, "h"},
		//									{555, 553, 554, "*"},
		//									{101, -1, -1, "i"},
		//									{101, -1, -1, "u"},
		//									{541, 265, 268, "\0"},
		//									{555, 17, 55, "*"},
		//									{60, -1, -1, "b"},
		//									{60, -1, -1, "g"},
		//									{556, 56, 57, "*"},
		//									{61, -1, -1, "b"},
		//									{61, -1, -1, "h"},
		//									{560, 558, 559, "*"},
		//									{102, -1, -1, "j"},
		//									{102, -1, -1, "u"},
		//									{256, 545, 546, "+"},
		//									{256, 550, 551, "+"},
		//									{271, 555, 556, "+"},
		//									{271, 560, 561, "+"},
		//									{546, 526, 527, "*"},
		//									{101, -1, -1, "i"},
		//									{101, -1, -1, "u"},
		//									{538, 519, 101, "*"},
		//									{538, 522, 542, "*"},
		//									{551, 536, 537, "*"},
		//									{102, -1, -1, "j"},
		//									{102, -1, -1, "u"},
		//									{539, 258, 102, "*"},
		//									{539, 261, 547, "*"},
		//									{556, 273, 274, "*"},
		//									{101, -1, -1, "i"},
		//									{101, -1, -1, "u"},
		//									{540, 529, 525, "*"},
		//									{540, 532, 552, "*"},
		//									{561, 276, 277, "*"},
		//									{102, -1, -1, "j"},
		//									{102, -1, -1, "u"},
		//									{541, 265, 535, "*"},
		//									{541, 268, 557, "*"},
		//									{615, 734, 735, "+"},
		//									{646, 662, 663, "+"},
		//									{746, 716, 717, "*"},
		//									{50, -1, -1, "a"},
		//									{50, -1, -1, "e"},
		//									{747, 719, 720, "*"},
		//									{51, -1, -1, "a"},
		//									{51, -1, -1, "f"},
		//									{648, 694, 695, "+"},
		//									{756, 726, 727, "*"},
		//									{52, -1, -1, "b"},
		//									{52, -1, -1, "e"},
		//									{757, 729, 730, "*"},
		//									{53, -1, -1, "b"},
		//									{53, -1, -1, "f"},
		//									{616, 788, 789, "+"},
		//									{646, 664, 665, "+"},
		//									{834, 826, 827, "*"},
		//									{107, -1, -1, "k"},
		//									{107, -1, -1, "p"},
		//									{835, 832, 833, "*"},
		//									{108, -1, -1, "k"},
		//									{108, -1, -1, "m"},
		//									{647, 680, 681, "+"},
		//									{850, 842, 843, "*"},
		//									{109, -1, -1, "l"},
		//									{109, -1, -1, "p"},
		//									{851, 848, 849, "*"},
		//									{110, -1, -1, "l"},
		//									{110, -1, -1, "m"},
		//									{617, 874, 875, "+"},
		//									{786, 802, 803, "+"},
		//									{886, 856, 857, "*"},
		//									{58, -1, -1, "a"},
		//									{58, -1, -1, "g"},
		//									{887, 859, 860, "*"},
		//									{59, -1, -1, "a"},
		//									{59, -1, -1, "h"},
		//									{788, 834, 835, "+"},
		//									{896, 866, 867, "*"},
		//									{60, -1, -1, "b"},
		//									{60, -1, -1, "g"},
		//									{897, 869, 870, "*"},
		//									{61, -1, -1, "b"},
		//									{61, -1, -1, "h"},
		//									{617, 876, 877, "+"},
		//									{741, 739, 740, "*"},
		//									{112, -1, -1, "k"},
		//									{112, -1, -1, "u"},
		//									{746, 744, 745, "*"},
		//									{113, -1, -1, "l"},
		//									{113, -1, -1, "u"},
		//									{114, 42, 200, "+"},
		//									{114, 562, 215, "+"},
		//									{7, 43, 577, "+"},
		//									{7, 592, 607, "+"},
		//									{647, 678, 679, "+"},
		//									{662, 651, 652, "*"},
		//									{50, -1, -1, "a"},
		//									{50, -1, -1, "e"},
		//									{664, 657, 658, "*"},
		//									{51, -1, -1, "a"},
		//									{51, -1, -1, "f"},
		//									{648, 696, 697, "+"},
		//									{662, 654, 655, "*"},
		//									{107, -1, -1, "k"},
		//									{107, -1, -1, "p"},
		//									{663, 660, 661, "*"},
		//									{108, -1, -1, "k"},
		//									{108, -1, -1, "m"},
		//									{649, 710, 711, "+"},
		//									{694, 683, 684, "*"},
		//									{52, -1, -1, "b"},
		//									{52, -1, -1, "e"},
		//									{696, 689, 690, "*"},
		//									{53, -1, -1, "b"},
		//									{53, -1, -1, "f"},
		//									{649, 712, 713, "+"},
		//									{678, 670, 671, "*"},
		//									{109, -1, -1, "l"},
		//									{109, -1, -1, "p"},
		//									{679, 676, 677, "*"},
		//									{110, -1, -1, "l"},
		//									{110, -1, -1, "m"},
		//									{42, 563, 578, "+"},
		//									{42, 618, 585, "+"},
		//									{200, 570, 625, "+"},
		//									{200, 632, 639, "+"},
		//									{663, 565, 566, "*"},
		//									{50, -1, -1, "a"},
		//									{50, -1, -1, "e"},
		//									{664, 580, 581, "*"},
		//									{107, -1, -1, "k"},
		//									{107, -1, -1, "p"},
		//									{665, 568, 569, "*"},
		//									{51, -1, -1, "a"},
		//									{51, -1, -1, "f"},
		//									{665, 583, 584, "*"},
		//									{108, -1, -1, "k"},
		//									{108, -1, -1, "m"},
		//									{563, 619, 626, "*"},
		//									{563, 650, 629, "*"},
		//									{578, 622, 653, "*"},
		//									{578, 656, 659, "*"},
		//									{679, 620, 621, "*"},
		//									{50, -1, -1, "a"},
		//									{50, -1, -1, "e"},
		//									{680, 587, 588, "*"},
		//									{109, -1, -1, "l"},
		//									{109, -1, -1, "p"},
		//									{681, 623, 624, "*"},
		//									{51, -1, -1, "a"},
		//									{51, -1, -1, "f"},
		//									{681, 590, 591, "*"},
		//									{110, -1, -1, "l"},
		//									{110, -1, -1, "m"},
		//									{618, 50, 640, "*"},
		//									{618, 666, 643, "*"},
		//									{585, 51, 669, "*"},
		//									{585, 672, 675, "*"},
		//									{695, 572, 573, "*"},
		//									{52, -1, -1, "b"},
		//									{52, -1, -1, "e"},
		//									{696, 627, 628, "*"},
		//									{107, -1, -1, "k"},
		//									{107, -1, -1, "p"},
		//									{697, 575, 576, "*"},
		//									{53, -1, -1, "b"},
		//									{53, -1, -1, "f"},
		//									{697, 630, 631, "*"},
		//									{108, -1, -1, "k"},
		//									{108, -1, -1, "m"},
		//									{570, 633, 202, "*"},
		//									{570, 682, 205, "*"},
		//									{625, 636, 685, "*"},
		//									{625, 688, 691, "*"},
		//									{711, 634, 635, "*"},
		//									{52, -1, -1, "b"},
		//									{52, -1, -1, "e"},
		//									{712, 641, 642, "*"},
		//									{109, -1, -1, "l"},
		//									{109, -1, -1, "p"},
		//									{713, 637, 638, "*"},
		//									{53, -1, -1, "b"},
		//									{53, -1, -1, "f"},
		//									{713, 644, 645, "*"},
		//									{110, -1, -1, "l"},
		//									{110, -1, -1, "m"},
		//									{632, 52, 209, "*"},
		//									{632, 698, 212, "*"},
		//									{639, 53, 701, "*"},
		//									{639, 704, 707, "*"},
		//									{735, 564, 567, "\0"},
		//									{741, 118, 119, "*"},
		//									{50, -1, -1, "a"},
		//									{50, -1, -1, "e"},
		//									{742, 121, 122, "*"},
		//									{51, -1, -1, "a"},
		//									{51, -1, -1, "f"},
		//									{751, 749, 750, "*"},
		//									{112, -1, -1, "k"},
		//									{112, -1, -1, "u"},
		//									{737, 571, 574, "\0"},
		//									{751, 125, 126, "*"},
		//									{52, -1, -1, "b"},
		//									{52, -1, -1, "e"},
		//									{752, 128, 129, "*"},
		//									{53, -1, -1, "b"},
		//									{53, -1, -1, "f"},
		//									{756, 754, 755, "*"},
		//									{113, -1, -1, "l"},
		//									{113, -1, -1, "u"},
		//									{562, 741, 742, "+"},
		//									{562, 746, 747, "+"},
		//									{215, 751, 752, "+"},
		//									{215, 756, 757, "+"},
		//									{742, 722, 723, "*"},
		//									{112, -1, -1, "k"},
		//									{112, -1, -1, "u"},
		//									{734, 715, 608, "*"},
		//									{734, 718, 738, "*"},
		//									{747, 732, 733, "*"},
		//									{113, -1, -1, "l"},
		//									{113, -1, -1, "u"},
		//									{735, 564, 611, "*"},
		//									{735, 567, 743, "*"},
		//									{752, 217, 218, "*"},
		//									{112, -1, -1, "k"},
		//									{112, -1, -1, "u"},
		//									{736, 725, 721, "*"},
		//									{736, 728, 748, "*"},
		//									{757, 220, 221, "*"},
		//									{113, -1, -1, "l"},
		//									{113, -1, -1, "u"},
		//									{737, 571, 731, "*"},
		//									{737, 574, 753, "*"},
		//									{787, 818, 819, "+"},
		//									{802, 791, 792, "*"},
		//									{58, -1, -1, "a"},
		//									{58, -1, -1, "g"},
		//									{804, 797, 798, "*"},
		//									{59, -1, -1, "a"},
		//									{59, -1, -1, "h"},
		//									{788, 836, 837, "+"},
		//									{802, 794, 795, "*"},
		//									{107, -1, -1, "k"},
		//									{107, -1, -1, "p"},
		//									{803, 800, 801, "*"},
		//									{108, -1, -1, "k"},
		//									{108, -1, -1, "m"},
		//									{789, 850, 851, "+"},
		//									{834, 823, 824, "*"},
		//									{60, -1, -1, "b"},
		//									{60, -1, -1, "g"},
		//									{836, 829, 830, "*"},
		//									{61, -1, -1, "b"},
		//									{61, -1, -1, "h"},
		//									{789, 852, 853, "+"},
		//									{818, 810, 811, "*"},
		//									{109, -1, -1, "l"},
		//									{109, -1, -1, "p"},
		//									{819, 816, 817, "*"},
		//									{110, -1, -1, "l"},
		//									{110, -1, -1, "m"},
		//									{43, 593, 13, "+"},
		//									{43, 758, 81, "+"},
		//									{577, 600, 765, "+"},
		//									{577, 772, 779, "+"},
		//									{803, 595, 596, "*"},
		//									{58, -1, -1, "a"},
		//									{58, -1, -1, "g"},
		//									{804, 85, 28, "*"},
		//									{107, -1, -1, "k"},
		//									{107, -1, -1, "p"},
		//									{805, 598, 599, "*"},
		//									{59, -1, -1, "a"},
		//									{59, -1, -1, "h"},
		//									{805, 103, 29, "*"},
		//									{108, -1, -1, "k"},
		//									{108, -1, -1, "m"},
		//									{593, 759, 766, "*"},
		//									{593, 790, 769, "*"},
		//									{13, 762, 793, "*"},
		//									{13, 796, 799, "*"},
		//									{819, 760, 761, "*"},
		//									{58, -1, -1, "a"},
		//									{58, -1, -1, "g"},
		//									{820, 86, 104, "*"},
		//									{109, -1, -1, "l"},
		//									{109, -1, -1, "p"},
		//									{821, 763, 764, "*"},
		//									{59, -1, -1, "a"},
		//									{59, -1, -1, "h"},
		//									{821, 105, 106, "*"},
		//									{110, -1, -1, "l"},
		//									{110, -1, -1, "m"},
		//									{758, 58, 780, "*"},
		//									{758, 806, 783, "*"},
		//									{81, 59, 809, "*"},
		//									{81, 812, 815, "*"},
		//									{835, 602, 603, "*"},
		//									{60, -1, -1, "b"},
		//									{60, -1, -1, "g"},
		//									{836, 767, 768, "*"},
		//									{107, -1, -1, "k"},
		//									{107, -1, -1, "p"},
		//									{837, 605, 606, "*"},
		//									{61, -1, -1, "b"},
		//									{61, -1, -1, "h"},
		//									{837, 770, 771, "*"},
		//									{108, -1, -1, "k"},
		//									{108, -1, -1, "m"},
		//									{600, 773, 579, "*"},
		//									{600, 822, 582, "*"},
		//									{765, 776, 825, "*"},
		//									{765, 828, 831, "*"},
		//									{851, 774, 775, "*"},
		//									{60, -1, -1, "b"},
		//									{60, -1, -1, "g"},
		//									{852, 781, 782, "*"},
		//									{109, -1, -1, "l"},
		//									{109, -1, -1, "p"},
		//									{853, 777, 778, "*"},
		//									{61, -1, -1, "b"},
		//									{61, -1, -1, "h"},
		//									{853, 784, 785, "*"},
		//									{110, -1, -1, "l"},
		//									{110, -1, -1, "m"},
		//									{772, 60, 586, "*"},
		//									{772, 838, 589, "*"},
		//									{779, 61, 841, "*"},
		//									{779, 844, 847, "*"},
		//									{875, 594, 597, "\0"},
		//									{881, 133, 134, "*"},
		//									{58, -1, -1, "a"},
		//									{58, -1, -1, "g"},
		//									{882, 136, 137, "*"},
		//									{59, -1, -1, "a"},
		//									{59, -1, -1, "h"},
		//									{891, 889, 890, "*"},
		//									{112, -1, -1, "k"},
		//									{112, -1, -1, "u"},
		//									{877, 601, 604, "\0"},
		//									{891, 140, 141, "*"},
		//									{60, -1, -1, "b"},
		//									{60, -1, -1, "g"},
		//									{892, 143, 144, "*"},
		//									{61, -1, -1, "b"},
		//									{61, -1, -1, "h"},
		//									{896, 894, 895, "*"},
		//									{113, -1, -1, "l"},
		//									{113, -1, -1, "u"},
		//									{592, 881, 882, "+"},
		//									{592, 886, 887, "+"},
		//									{607, 891, 892, "+"},
		//									{607, 896, 897, "+"},
		//									{882, 862, 863, "*"},
		//									{112, -1, -1, "k"},
		//									{112, -1, -1, "u"},
		//									{874, 855, 112, "*"},
		//									{874, 858, 878, "*"},
		//									{887, 872, 873, "*"},
		//									{113, -1, -1, "l"},
		//									{113, -1, -1, "u"},
		//									{875, 594, 113, "*"},
		//									{875, 597, 883, "*"},
		//									{892, 609, 610, "*"},
		//									{112, -1, -1, "k"},
		//									{112, -1, -1, "u"},
		//									{876, 865, 861, "*"},
		//									{876, 868, 888, "*"},
		//									{897, 612, 613, "*"},
		//									{113, -1, -1, "l"},
		//									{113, -1, -1, "u"},
		//									{877, 601, 871, "*"},
		//									{877, 604, 893, "*"},
		//									{951, 1070, 1071, "+"},
		//									{982, 998, 999, "+"},
		//									{1082, 1052, 1053, "*"},
		//									{66, -1, -1, "c"},
		//									{66, -1, -1, "e"},
		//									{1083, 1055, 1056, "*"},
		//									{67, -1, -1, "c"},
		//									{67, -1, -1, "f"},
		//									{984, 1030, 1031, "+"},
		//									{1092, 1062, 1063, "*"},
		//									{68, -1, -1, "d"},
		//									{68, -1, -1, "e"},
		//									{1093, 1065, 1066, "*"},
		//									{69, -1, -1, "d"},
		//									{69, -1, -1, "f"},
		//									{952, 1124, 1125, "+"},
		//									{982, 1000, 1001, "+"},
		//									{1170, 1162, 1163, "*"},
		//									{96, -1, -1, "i"},
		//									{96, -1, -1, "p"},
		//									{1171, 1168, 1169, "*"},
		//									{97, -1, -1, "i"},
		//									{97, -1, -1, "m"},
		//									{983, 1016, 1017, "+"},
		//									{1186, 1178, 1179, "*"},
		//									{98, -1, -1, "j"},
		//									{98, -1, -1, "p"},
		//									{1187, 1184, 1185, "*"},
		//									{99, -1, -1, "j"},
		//									{99, -1, -1, "m"},
		//									{953, 1210, 1211, "+"},
		//									{1122, 1138, 1139, "+"},
		//									{1222, 1192, 1193, "*"},
		//									{74, -1, -1, "c"},
		//									{74, -1, -1, "g"},
		//									{1223, 1195, 1196, "*"},
		//									{75, -1, -1, "c"},
		//									{75, -1, -1, "h"},
		//									{1124, 1170, 1171, "+"},
		//									{1232, 1202, 1203, "*"},
		//									{76, -1, -1, "d"},
		//									{76, -1, -1, "g"},
		//									{1233, 1205, 1206, "*"},
		//									{77, -1, -1, "d"},
		//									{77, -1, -1, "h"},
		//									{953, 1212, 1213, "+"},
		//									{1077, 1075, 1076, "*"},
		//									{101, -1, -1, "i"},
		//									{101, -1, -1, "u"},
		//									{1082, 1080, 1081, "*"},
		//									{102, -1, -1, "j"},
		//									{102, -1, -1, "u"},
		//									{5, 169, 88, "+"},
		//									{5, 898, 89, "+"},
		//									{145, 184, 913, "+"},
		//									{145, 928, 943, "+"},
		//									{983, 1014, 1015, "+"},
		//									{998, 987, 988, "*"},
		//									{66, -1, -1, "c"},
		//									{66, -1, -1, "e"},
		//									{1000, 993, 994, "*"},
		//									{67, -1, -1, "c"},
		//									{67, -1, -1, "f"},
		//									{984, 1032, 1033, "+"},
		//									{998, 990, 991, "*"},
		//									{96, -1, -1, "i"},
		//									{96, -1, -1, "p"},
		//									{999, 996, 997, "*"},
		//									{97, -1, -1, "i"},
		//									{97, -1, -1, "m"},
		//									{985, 1046, 1047, "+"},
		//									{1030, 1019, 1020, "*"},
		//									{68, -1, -1, "d"},
		//									{68, -1, -1, "e"},
		//									{1032, 1025, 1026, "*"},
		//									{69, -1, -1, "d"},
		//									{69, -1, -1, "f"},
		//									{985, 1048, 1049, "+"},
		//									{1014, 1006, 1007, "*"},
		//									{98, -1, -1, "j"},
		//									{98, -1, -1, "p"},
		//									{1015, 1012, 1013, "*"},
		//									{99, -1, -1, "j"},
		//									{99, -1, -1, "m"},
		//									{169, 899, 914, "+"},
		//									{169, 954, 921, "+"},
		//									{88, 906, 961, "+"},
		//									{88, 968, 975, "+"},
		//									{999, 901, 902, "*"},
		//									{66, -1, -1, "c"},
		//									{66, -1, -1, "e"},
		//									{1000, 916, 917, "*"},
		//									{96, -1, -1, "i"},
		//									{96, -1, -1, "p"},
		//									{1001, 904, 905, "*"},
		//									{67, -1, -1, "c"},
		//									{67, -1, -1, "f"},
		//									{1001, 919, 920, "*"},
		//									{97, -1, -1, "i"},
		//									{97, -1, -1, "m"},
		//									{899, 955, 962, "*"},
		//									{899, 986, 965, "*"},
		//									{914, 958, 989, "*"},
		//									{914, 992, 995, "*"},
		//									{1015, 956, 957, "*"},
		//									{66, -1, -1, "c"},
		//									{66, -1, -1, "e"},
		//									{1016, 923, 924, "*"},
		//									{98, -1, -1, "j"},
		//									{98, -1, -1, "p"},
		//									{1017, 959, 960, "*"},
		//									{67, -1, -1, "c"},
		//									{67, -1, -1, "f"},
		//									{1017, 926, 927, "*"},
		//									{99, -1, -1, "j"},
		//									{99, -1, -1, "m"},
		//									{954, 171, 976, "*"},
		//									{954, 1002, 979, "*"},
		//									{921, 174, 1005, "*"},
		//									{921, 1008, 1011, "*"},
		//									{1031, 908, 909, "*"},
		//									{68, -1, -1, "d"},
		//									{68, -1, -1, "e"},
		//									{1032, 963, 964, "*"},
		//									{96, -1, -1, "i"},
		//									{96, -1, -1, "p"},
		//									{1033, 911, 912, "*"},
		//									{69, -1, -1, "d"},
		//									{69, -1, -1, "f"},
		//									{1033, 966, 967, "*"},
		//									{97, -1, -1, "i"},
		//									{97, -1, -1, "m"},
		//									{906, 969, 96, "*"},
		//									{906, 1018, 97, "*"},
		//									{961, 972, 1021, "*"},
		//									{961, 1024, 1027, "*"},
		//									{1047, 970, 971, "*"},
		//									{68, -1, -1, "d"},
		//									{68, -1, -1, "e"},
		//									{1048, 977, 978, "*"},
		//									{98, -1, -1, "j"},
		//									{98, -1, -1, "p"},
		//									{1049, 973, 974, "*"},
		//									{69, -1, -1, "d"},
		//									{69, -1, -1, "f"},
		//									{1049, 980, 981, "*"},
		//									{99, -1, -1, "j"},
		//									{99, -1, -1, "m"},
		//									{968, 178, 98, "*"},
		//									{968, 1034, 99, "*"},
		//									{975, 181, 1037, "*"},
		//									{975, 1040, 1043, "*"},
		//									{1071, 900, 903, "\0"},
		//									{1077, 37, 20, "*"},
		//									{66, -1, -1, "c"},
		//									{66, -1, -1, "e"},
		//									{1078, 62, 21, "*"},
		//									{67, -1, -1, "c"},
		//									{67, -1, -1, "f"},
		//									{1087, 1085, 1086, "*"},
		//									{101, -1, -1, "i"},
		//									{101, -1, -1, "u"},
		//									{1073, 907, 910, "\0"},
		//									{1087, 38, 63, "*"},
		//									{68, -1, -1, "d"},
		//									{68, -1, -1, "e"},
		//									{1088, 64, 65, "*"},
		//									{69, -1, -1, "d"},
		//									{69, -1, -1, "f"},
		//									{1092, 1090, 1091, "*"},
		//									{102, -1, -1, "j"},
		//									{102, -1, -1, "u"},
		//									{898, 1077, 1078, "+"},
		//									{898, 1082, 1083, "+"},
		//									{89, 1087, 1088, "+"},
		//									{89, 1092, 1093, "+"},
		//									{1078, 1058, 1059, "*"},
		//									{101, -1, -1, "i"},
		//									{101, -1, -1, "u"},
		//									{1070, 1051, 944, "*"},
		//									{1070, 1054, 1074, "*"},
		//									{1083, 1068, 1069, "*"},
		//									{102, -1, -1, "j"},
		//									{102, -1, -1, "u"},
		//									{1071, 900, 947, "*"},
		//									{1071, 903, 1079, "*"},
		//									{1088, 24, 15, "*"},
		//									{101, -1, -1, "i"},
		//									{101, -1, -1, "u"},
		//									{1072, 1061, 1057, "*"},
		//									{1072, 1064, 1084, "*"},
		//									{1093, 25, 100, "*"},
		//									{102, -1, -1, "j"},
		//									{102, -1, -1, "u"},
		//									{1073, 907, 1067, "*"},
		//									{1073, 910, 1089, "*"},
		//									{1123, 1154, 1155, "+"},
		//									{1138, 1127, 1128, "*"},
		//									{74, -1, -1, "c"},
		//									{74, -1, -1, "g"},
		//									{1140, 1133, 1134, "*"},
		//									{75, -1, -1, "c"},
		//									{75, -1, -1, "h"},
		//									{1124, 1172, 1173, "+"},
		//									{1138, 1130, 1131, "*"},
		//									{96, -1, -1, "i"},
		//									{96, -1, -1, "p"},
		//									{1139, 1136, 1137, "*"},
		//									{97, -1, -1, "i"},
		//									{97, -1, -1, "m"},
		//									{1125, 1186, 1187, "+"},
		//									{1170, 1159, 1160, "*"},
		//									{76, -1, -1, "d"},
		//									{76, -1, -1, "g"},
		//									{1172, 1165, 1166, "*"},
		//									{77, -1, -1, "d"},
		//									{77, -1, -1, "h"},
		//									{1125, 1188, 1189, "+"},
		//									{1154, 1146, 1147, "*"},
		//									{98, -1, -1, "j"},
		//									{98, -1, -1, "p"},
		//									{1155, 1152, 1153, "*"},
		//									{99, -1, -1, "j"},
		//									{99, -1, -1, "m"},
		//									{184, 929, 147, "+"},
		//									{184, 1094, 154, "+"},
		//									{913, 936, 1101, "+"},
		//									{913, 1108, 1115, "+"},
		//									{1139, 931, 932, "*"},
		//									{74, -1, -1, "c"},
		//									{74, -1, -1, "g"},
		//									{1140, 149, 150, "*"},
		//									{96, -1, -1, "i"},
		//									{96, -1, -1, "p"},
		//									{1141, 934, 935, "*"},
		//									{75, -1, -1, "c"},
		//									{75, -1, -1, "h"},
		//									{1141, 152, 153, "*"},
		//									{97, -1, -1, "i"},
		//									{97, -1, -1, "m"},
		//									{929, 1095, 1102, "*"},
		//									{929, 1126, 1105, "*"},
		//									{147, 1098, 1129, "*"},
		//									{147, 1132, 1135, "*"},
		//									{1155, 1096, 1097, "*"},
		//									{74, -1, -1, "c"},
		//									{74, -1, -1, "g"},
		//									{1156, 156, 157, "*"},
		//									{98, -1, -1, "j"},
		//									{98, -1, -1, "p"},
		//									{1157, 1099, 1100, "*"},
		//									{75, -1, -1, "c"},
		//									{75, -1, -1, "h"},
		//									{1157, 159, 160, "*"},
		//									{99, -1, -1, "j"},
		//									{99, -1, -1, "m"},
		//									{1094, 186, 1116, "*"},
		//									{1094, 1142, 1119, "*"},
		//									{154, 189, 1145, "*"},
		//									{154, 1148, 1151, "*"},
		//									{1171, 938, 939, "*"},
		//									{76, -1, -1, "d"},
		//									{76, -1, -1, "g"},
		//									{1172, 1103, 1104, "*"},
		//									{96, -1, -1, "i"},
		//									{96, -1, -1, "p"},
		//									{1173, 941, 942, "*"},
		//									{77, -1, -1, "d"},
		//									{77, -1, -1, "h"},
		//									{1173, 1106, 1107, "*"},
		//									{97, -1, -1, "i"},
		//									{97, -1, -1, "m"},
		//									{936, 1109, 915, "*"},
		//									{936, 1158, 918, "*"},
		//									{1101, 1112, 1161, "*"},
		//									{1101, 1164, 1167, "*"},
		//									{1187, 1110, 1111, "*"},
		//									{76, -1, -1, "d"},
		//									{76, -1, -1, "g"},
		//									{1188, 1117, 1118, "*"},
		//									{98, -1, -1, "j"},
		//									{98, -1, -1, "p"},
		//									{1189, 1113, 1114, "*"},
		//									{77, -1, -1, "d"},
		//									{77, -1, -1, "h"},
		//									{1189, 1120, 1121, "*"},
		//									{99, -1, -1, "j"},
		//									{99, -1, -1, "m"},
		//									{1108, 193, 922, "*"},
		//									{1108, 1174, 925, "*"},
		//									{1115, 196, 1177, "*"},
		//									{1115, 1180, 1183, "*"},
		//									{1211, 930, 933, "\0"},
		//									{1217, 18, 22, "*"},
		//									{74, -1, -1, "c"},
		//									{74, -1, -1, "g"},
		//									{1218, 70, 23, "*"},
		//									{75, -1, -1, "c"},
		//									{75, -1, -1, "h"},
		//									{1227, 1225, 1226, "*"},
		//									{101, -1, -1, "i"},
		//									{101, -1, -1, "u"},
		//									{1213, 937, 940, "\0"},
		//									{1227, 19, 71, "*"},
		//									{76, -1, -1, "d"},
		//									{76, -1, -1, "g"},
		//									{1228, 72, 73, "*"},
		//									{77, -1, -1, "d"},
		//									{77, -1, -1, "h"},
		//									{1232, 1230, 1231, "*"},
		//									{102, -1, -1, "j"},
		//									{102, -1, -1, "u"},
		//									{928, 1217, 1218, "+"},
		//									{928, 1222, 1223, "+"},
		//									{943, 1227, 1228, "+"},
		//									{943, 1232, 1233, "+"},
		//									{1218, 1198, 1199, "*"},
		//									{101, -1, -1, "i"},
		//									{101, -1, -1, "u"},
		//									{1210, 1191, 162, "*"},
		//									{1210, 1194, 1214, "*"},
		//									{1223, 1208, 1209, "*"},
		//									{102, -1, -1, "j"},
		//									{102, -1, -1, "u"},
		//									{1211, 930, 165, "*"},
		//									{1211, 933, 1219, "*"},
		//									{1228, 945, 946, "*"},
		//									{101, -1, -1, "i"},
		//									{101, -1, -1, "u"},
		//									{1212, 1201, 1197, "*"},
		//									{1212, 1204, 1224, "*"},
		//									{1233, 948, 949, "*"},
		//									{102, -1, -1, "j"},
		//									{102, -1, -1, "u"},
		//									{1213, 937, 1207, "*"},
		//									{1213, 940, 1229, "*"},
		//									{1287, 1406, 1407, "+"},
		//									{1318, 1334, 1335, "+"},
		//									{1418, 1388, 1389, "*"},
		//									{66, -1, -1, "c"},
		//									{66, -1, -1, "e"},
		//									{1419, 1391, 1392, "*"},
		//									{67, -1, -1, "c"},
		//									{67, -1, -1, "f"},
		//									{1320, 1366, 1367, "+"},
		//									{1428, 1398, 1399, "*"},
		//									{68, -1, -1, "d"},
		//									{68, -1, -1, "e"},
		//									{1429, 1401, 1402, "*"},
		//									{69, -1, -1, "d"},
		//									{69, -1, -1, "f"},
		//									{1288, 1460, 1461, "+"},
		//									{1318, 1336, 1337, "+"},
		//									{1506, 1498, 1499, "*"},
		//									{107, -1, -1, "k"},
		//									{107, -1, -1, "p"},
		//									{1507, 1504, 1505, "*"},
		//									{108, -1, -1, "k"},
		//									{108, -1, -1, "m"},
		//									{1319, 1352, 1353, "+"},
		//									{1522, 1514, 1515, "*"},
		//									{109, -1, -1, "l"},
		//									{109, -1, -1, "p"},
		//									{1523, 1520, 1521, "*"},
		//									{110, -1, -1, "l"},
		//									{110, -1, -1, "m"},
		//									{1289, 1546, 1547, "+"},
		//									{1458, 1474, 1475, "+"},
		//									{1558, 1528, 1529, "*"},
		//									{74, -1, -1, "c"},
		//									{74, -1, -1, "g"},
		//									{1559, 1531, 1532, "*"},
		//									{75, -1, -1, "c"},
		//									{75, -1, -1, "h"},
		//									{1460, 1506, 1507, "+"},
		//									{1568, 1538, 1539, "*"},
		//									{76, -1, -1, "d"},
		//									{76, -1, -1, "g"},
		//									{1569, 1541, 1542, "*"},
		//									{77, -1, -1, "d"},
		//									{77, -1, -1, "h"},
		//									{1289, 1548, 1549, "+"},
		//									{1413, 1411, 1412, "*"},
		//									{112, -1, -1, "k"},
		//									{112, -1, -1, "u"},
		//									{1418, 1416, 1417, "*"},
		//									{113, -1, -1, "l"},
		//									{113, -1, -1, "u"},
		//									{168, 44, 90, "+"},
		//									{168, 1234, 91, "+"},
		//									{199, 45, 1249, "+"},
		//									{199, 1264, 1279, "+"},
		//									{1319, 1350, 1351, "+"},
		//									{1334, 1323, 1324, "*"},
		//									{66, -1, -1, "c"},
		//									{66, -1, -1, "e"},
		//									{1336, 1329, 1330, "*"},
		//									{67, -1, -1, "c"},
		//									{67, -1, -1, "f"},
		//									{1320, 1368, 1369, "+"},
		//									{1334, 1326, 1327, "*"},
		//									{107, -1, -1, "k"},
		//									{107, -1, -1, "p"},
		//									{1335, 1332, 1333, "*"},
		//									{108, -1, -1, "k"},
		//									{108, -1, -1, "m"},
		//									{1321, 1382, 1383, "+"},
		//									{1366, 1355, 1356, "*"},
		//									{68, -1, -1, "d"},
		//									{68, -1, -1, "e"},
		//									{1368, 1361, 1362, "*"},
		//									{69, -1, -1, "d"},
		//									{69, -1, -1, "f"},
		//									{1321, 1384, 1385, "+"},
		//									{1350, 1342, 1343, "*"},
		//									{109, -1, -1, "l"},
		//									{109, -1, -1, "p"},
		//									{1351, 1348, 1349, "*"},
		//									{110, -1, -1, "l"},
		//									{110, -1, -1, "m"},
		//									{44, 1235, 1250, "+"},
		//									{44, 1290, 1257, "+"},
		//									{90, 1242, 1297, "+"},
		//									{90, 1304, 1311, "+"},
		//									{1335, 1237, 1238, "*"},
		//									{66, -1, -1, "c"},
		//									{66, -1, -1, "e"},
		//									{1336, 1252, 1253, "*"},
		//									{107, -1, -1, "k"},
		//									{107, -1, -1, "p"},
		//									{1337, 1240, 1241, "*"},
		//									{67, -1, -1, "c"},
		//									{67, -1, -1, "f"},
		//									{1337, 1255, 1256, "*"},
		//									{108, -1, -1, "k"},
		//									{108, -1, -1, "m"},
		//									{1235, 1291, 1298, "*"},
		//									{1235, 1322, 1301, "*"},
		//									{1250, 1294, 1325, "*"},
		//									{1250, 1328, 1331, "*"},
		//									{1351, 1292, 1293, "*"},
		//									{66, -1, -1, "c"},
		//									{66, -1, -1, "e"},
		//									{1352, 1259, 1260, "*"},
		//									{109, -1, -1, "l"},
		//									{109, -1, -1, "p"},
		//									{1353, 1295, 1296, "*"},
		//									{67, -1, -1, "c"},
		//									{67, -1, -1, "f"},
		//									{1353, 1262, 1263, "*"},
		//									{110, -1, -1, "l"},
		//									{110, -1, -1, "m"},
		//									{1290, 66, 1312, "*"},
		//									{1290, 1338, 1315, "*"},
		//									{1257, 67, 1341, "*"},
		//									{1257, 1344, 1347, "*"},
		//									{1367, 1244, 1245, "*"},
		//									{68, -1, -1, "d"},
		//									{68, -1, -1, "e"},
		//									{1368, 1299, 1300, "*"},
		//									{107, -1, -1, "k"},
		//									{107, -1, -1, "p"},
		//									{1369, 1247, 1248, "*"},
		//									{69, -1, -1, "d"},
		//									{69, -1, -1, "f"},
		//									{1369, 1302, 1303, "*"},
		//									{108, -1, -1, "k"},
		//									{108, -1, -1, "m"},
		//									{1242, 1305, 107, "*"},
		//									{1242, 1354, 108, "*"},
		//									{1297, 1308, 1357, "*"},
		//									{1297, 1360, 1363, "*"},
		//									{1383, 1306, 1307, "*"},
		//									{68, -1, -1, "d"},
		//									{68, -1, -1, "e"},
		//									{1384, 1313, 1314, "*"},
		//									{109, -1, -1, "l"},
		//									{109, -1, -1, "p"},
		//									{1385, 1309, 1310, "*"},
		//									{69, -1, -1, "d"},
		//									{69, -1, -1, "f"},
		//									{1385, 1316, 1317, "*"},
		//									{110, -1, -1, "l"},
		//									{110, -1, -1, "m"},
		//									{1304, 68, 109, "*"},
		//									{1304, 1370, 110, "*"},
		//									{1311, 69, 1373, "*"},
		//									{1311, 1376, 1379, "*"},
		//									{1407, 1236, 1239, "\0"},
		//									{1413, 172, 173, "*"},
		//									{66, -1, -1, "c"},
		//									{66, -1, -1, "e"},
		//									{1414, 175, 176, "*"},
		//									{67, -1, -1, "c"},
		//									{67, -1, -1, "f"},
		//									{1423, 1421, 1422, "*"},
		//									{112, -1, -1, "k"},
		//									{112, -1, -1, "u"},
		//									{1409, 1243, 1246, "\0"},
		//									{1423, 179, 180, "*"},
		//									{68, -1, -1, "d"},
		//									{68, -1, -1, "e"},
		//									{1424, 182, 183, "*"},
		//									{69, -1, -1, "d"},
		//									{69, -1, -1, "f"},
		//									{1428, 1426, 1427, "*"},
		//									{113, -1, -1, "l"},
		//									{113, -1, -1, "u"},
		//									{1234, 1413, 1414, "+"},
		//									{1234, 1418, 1419, "+"},
		//									{91, 1423, 1424, "+"},
		//									{91, 1428, 1429, "+"},
		//									{1414, 1394, 1395, "*"},
		//									{112, -1, -1, "k"},
		//									{112, -1, -1, "u"},
		//									{1406, 1387, 1280, "*"},
		//									{1406, 1390, 1410, "*"},
		//									{1419, 1404, 1405, "*"},
		//									{113, -1, -1, "l"},
		//									{113, -1, -1, "u"},
		//									{1407, 1236, 1283, "*"},
		//									{1407, 1239, 1415, "*"},
		//									{1424, 26, 87, "*"},
		//									{112, -1, -1, "k"},
		//									{112, -1, -1, "u"},
		//									{1408, 1397, 1393, "*"},
		//									{1408, 1400, 1420, "*"},
		//									{1429, 27, 111, "*"},
		//									{113, -1, -1, "l"},
		//									{113, -1, -1, "u"},
		//									{1409, 1243, 1403, "*"},
		//									{1409, 1246, 1425, "*"},
		//									{1459, 1490, 1491, "+"},
		//									{1474, 1463, 1464, "*"},
		//									{74, -1, -1, "c"},
		//									{74, -1, -1, "g"},
		//									{1476, 1469, 1470, "*"},
		//									{75, -1, -1, "c"},
		//									{75, -1, -1, "h"},
		//									{1460, 1508, 1509, "+"},
		//									{1474, 1466, 1467, "*"},
		//									{107, -1, -1, "k"},
		//									{107, -1, -1, "p"},
		//									{1475, 1472, 1473, "*"},
		//									{108, -1, -1, "k"},
		//									{108, -1, -1, "m"},
		//									{1461, 1522, 1523, "+"},
		//									{1506, 1495, 1496, "*"},
		//									{76, -1, -1, "d"},
		//									{76, -1, -1, "g"},
		//									{1508, 1501, 1502, "*"},
		//									{77, -1, -1, "d"},
		//									{77, -1, -1, "h"},
		//									{1461, 1524, 1525, "+"},
		//									{1490, 1482, 1483, "*"},
		//									{109, -1, -1, "l"},
		//									{109, -1, -1, "p"},
		//									{1491, 1488, 1489, "*"},
		//									{110, -1, -1, "l"},
		//									{110, -1, -1, "m"},
		//									{45, 1265, 201, "+"},
		//									{45, 1430, 208, "+"},
		//									{1249, 1272, 1437, "+"},
		//									{1249, 1444, 1451, "+"},
		//									{1475, 1267, 1268, "*"},
		//									{74, -1, -1, "c"},
		//									{74, -1, -1, "g"},
		//									{1476, 203, 204, "*"},
		//									{107, -1, -1, "k"},
		//									{107, -1, -1, "p"},
		//									{1477, 1270, 1271, "*"},
		//									{75, -1, -1, "c"},
		//									{75, -1, -1, "h"},
		//									{1477, 206, 207, "*"},
		//									{108, -1, -1, "k"},
		//									{108, -1, -1, "m"},
		//									{1265, 1431, 1438, "*"},
		//									{1265, 1462, 1441, "*"},
		//									{201, 1434, 1465, "*"},
		//									{201, 1468, 1471, "*"},
		//									{1491, 1432, 1433, "*"},
		//									{74, -1, -1, "c"},
		//									{74, -1, -1, "g"},
		//									{1492, 210, 211, "*"},
		//									{109, -1, -1, "l"},
		//									{109, -1, -1, "p"},
		//									{1493, 1435, 1436, "*"},
		//									{75, -1, -1, "c"},
		//									{75, -1, -1, "h"},
		//									{1493, 213, 214, "*"},
		//									{110, -1, -1, "l"},
		//									{110, -1, -1, "m"},
		//									{1430, 74, 1452, "*"},
		//									{1430, 1478, 1455, "*"},
		//									{208, 75, 1481, "*"},
		//									{208, 1484, 1487, "*"},
		//									{1507, 1274, 1275, "*"},
		//									{76, -1, -1, "d"},
		//									{76, -1, -1, "g"},
		//									{1508, 1439, 1440, "*"},
		//									{107, -1, -1, "k"},
		//									{107, -1, -1, "p"},
		//									{1509, 1277, 1278, "*"},
		//									{77, -1, -1, "d"},
		//									{77, -1, -1, "h"},
		//									{1509, 1442, 1443, "*"},
		//									{108, -1, -1, "k"},
		//									{108, -1, -1, "m"},
		//									{1272, 1445, 1251, "*"},
		//									{1272, 1494, 1254, "*"},
		//									{1437, 1448, 1497, "*"},
		//									{1437, 1500, 1503, "*"},
		//									{1523, 1446, 1447, "*"},
		//									{76, -1, -1, "d"},
		//									{76, -1, -1, "g"},
		//									{1524, 1453, 1454, "*"},
		//									{109, -1, -1, "l"},
		//									{109, -1, -1, "p"},
		//									{1525, 1449, 1450, "*"},
		//									{77, -1, -1, "d"},
		//									{77, -1, -1, "h"},
		//									{1525, 1456, 1457, "*"},
		//									{110, -1, -1, "l"},
		//									{110, -1, -1, "m"},
		//									{1444, 76, 1258, "*"},
		//									{1444, 1510, 1261, "*"},
		//									{1451, 77, 1513, "*"},
		//									{1451, 1516, 1519, "*"},
		//									{1547, 1266, 1269, "\0"},
		//									{1553, 187, 188, "*"},
		//									{74, -1, -1, "c"},
		//									{74, -1, -1, "g"},
		//									{1554, 190, 191, "*"},
		//									{75, -1, -1, "c"},
		//									{75, -1, -1, "h"},
		//									{1563, 1561, 1562, "*"},
		//									{112, -1, -1, "k"},
		//									{112, -1, -1, "u"},
		//									{1549, 1273, 1276, "\0"},
		//									{1563, 194, 195, "*"},
		//									{76, -1, -1, "d"},
		//									{76, -1, -1, "g"},
		//									{1564, 197, 198, "*"},
		//									{77, -1, -1, "d"},
		//									{77, -1, -1, "h"},
		//									{1568, 1566, 1567, "*"},
		//									{113, -1, -1, "l"},
		//									{113, -1, -1, "u"},
		//									{1264, 1553, 1554, "+"},
		//									{1264, 1558, 1559, "+"},
		//									{1279, 1563, 1564, "+"},
		//									{1279, 1568, 1569, "+"},
		//									{1554, 1534, 1535, "*"},
		//									{112, -1, -1, "k"},
		//									{112, -1, -1, "u"},
		//									{1546, 1527, 216, "*"},
		//									{1546, 1530, 1550, "*"},
		//									{1559, 1544, 1545, "*"},
		//									{113, -1, -1, "l"},
		//									{113, -1, -1, "u"},
		//									{1547, 1266, 219, "*"},
		//									{1547, 1269, 1555, "*"},
		//									{1564, 1281, 1282, "*"},
		//									{112, -1, -1, "k"},
		//									{112, -1, -1, "u"},
		//									{1548, 1537, 1533, "*"},
		//									{1548, 1540, 1560, "*"},
		//									{1569, 1284, 1285, "*"},
		//									{113, -1, -1, "l"},
		//									{113, -1, -1, "u"},
		//									{1549, 1273, 1543, "*"},
		//									{1549, 1276, 1565, "*"} };

		//	openBrackets(inputTree, inputRoot);

		//	bool isEqualTree = isEqualTrees(expectedTree, expectedRoot, inputTree, inputRoot);

		//	Assert::IsTrue(isEqualTree);
		//}
	};
}
